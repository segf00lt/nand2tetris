// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    /* fetch and decode */
    Not(in=instruction[15], out=Ainst); /* if 1 A else C */
    Or(a=Ainst, b=instruction[5], out=Aload);
    And(a=instruction[15], b=instruction[4], out=Dload);
    And(a=instruction[15], b=instruction[3], out=writeM); /* write to M if C type and d3=1 */
    Mux16(a=Aout, b=inM, sel=instruction[12], out=AMuxM);

    /* ALU execute */
    ALU(x=Dout, y=AMuxM,
    nx=instruction[10],
    zx=instruction[11],
    zy=instruction[9],
    ny=instruction[8],
    f=instruction[7],
    no=instruction[6],
    out=ALUout, out=outM,
    zr=ALUzr, ng=ALUng);

    /* compare */
    And(a=Notzr, b=Notng, out=JGT);
    And(a=ALUzr, b=Notng, out=JEQ);
    Not(in=ALUng, out=Notng, out=JGE);
    And(a=Notzr, b=ALUng, out=JLT);
    Not(in=ALUzr, out=Notzr, out=JNE);
    Or(a=ALUzr, b=ALUng, out=JLE);
    Mux(a=false, b=JGT, sel=instruction[0], out=aMuxb);
    Mux(a=JEQ, b=JGE, sel=instruction[0], out=cMuxd);
    Mux(a=JLT, b=JNE, sel=instruction[0], out=eMuxf);
    Mux(a=JLE, b=true, sel=instruction[0], out=gMuxh);
    Mux(a=aMuxb, b=cMuxd, sel=instruction[1], out=aMuxbMuxcMuxd);
    Mux(a=eMuxf, b=gMuxh, sel=instruction[1], out=eMuxfMuxgMuxh);
    Mux(a=aMuxbMuxcMuxd, b=eMuxfMuxgMuxh, sel=instruction[2], out=CMPout);
    And(a=CMPout, b=instruction[15], out=PCload);
    Not(in=PCload, out=PCinc);

    /* writeback */
    Mux16(a=ALUout, b=instruction, sel=Ainst, out=Ain);
    ARegister(in=Ain, load=Aload, out[0..14]=addressM, out=Aout);
    DRegister(in=ALUout, load=Dload, out=Dout);

    /* step PC */
    PC(in=Aout, load=PCload, inc=PCinc, reset=reset, out[0..14]=pc);
}
